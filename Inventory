using UnityEngine;
using UnityEngine.UI;
using System.Collections;

public class Inventory : MonoBehaviour
{
    public Weapon activeBaseWeapon;
    public Weapon activePistol;

    public GameObject[] baseWeapons;
    public GameObject[] pistols;

    private bool canScreen = true;
    public Cell[] inventoryCells;

    public Cell activeCell;

    private void Start()
    {
        ActiveCellObject(inventoryCells[0]);
    }

    private void FixedUpdate()
    {
        float mw = Input.GetAxis("Mouse ScrollWheel");

        if (!OnlyOneActiveWeapon() && mw == 0f)
        {      
            ActiveCellObject(activeCell);
        }

        if (canScreen)
        {
            if (mw == 0.1f)
            {
                Next();
                return;
            }
            else if (mw == -0.1f)
            {
                Last();
                return;
            }

            canScreen = false;
            StartCoroutine(WaitAndSetTrue());
        }
        else
        {
            StartCoroutine(WaitAndSetTrue());
        }
        
    }

    public void ActiveWeapon(Weapon _activeWeapon, GameObject[] _objs, LyingWeapon _dropedWeapon)
    {
        if (_activeWeapon != null)
        {
            _activeWeapon.gameObject.SetActive(false);
        }


        foreach (GameObject weapon in _objs)
        {
            if (weapon.GetComponent<LyingWeapon>().weaponName == _dropedWeapon.weaponName)
            {
                weapon.gameObject.SetActive(true);
            }
            else
            {
                weapon.gameObject.SetActive(false);
            }
        }
    }

    private bool OnlyOneActiveWeapon()
    {
        int activeWeapons = 0;

        foreach (Cell cell in inventoryCells)
        {
            if (cell.cellObject.activeSelf == true)
            {
                activeWeapons++;
            }
        }

        if (activeWeapons == 1)
        {
            return true;
        }

        return false;
    }

    public void SetFalseAllCells()
    {
        foreach (Cell cell in inventoryCells)
        {
            cell.cellObject.SetActive(false);
            cell.gameObject.GetComponent<Image>().enabled = false;
            cell.transform.parent.gameObject.GetComponent<RawImage>().enabled = false;
        }
    } 

    public void ActiveCellObject(Cell _cellToActive)
    {
        SetFalseAllCells();
        activeCell = _cellToActive;

        StartCoroutine(SetAnimation("TakeWeapon"));

        StartCoroutine(ActiveDelay(_cellToActive));
    }

    public void ActiveNextCellObject(int _x)
    {
        for (int i = 0; i < inventoryCells.Length; i++)
        {
            if (inventoryCells[i] == activeCell)
            {
                if (i == 2)
                {
                    ActiveCellObject(inventoryCells[0]);
                    return;

                }
                else if (i == 0)
                {
                    ActiveCellObject(inventoryCells[inventoryCells.Length - 1]);
                    return;
                }

                ActiveCellObject(inventoryCells[i + _x]);
            }
        }
    }

    private int GetNumInArray()
    {

        for (int i = 0; i < inventoryCells.Length; i++)
        {
            if (inventoryCells[i] == activeCell)
            {
                return i;
            }
        }

        return 0;
    }

    private void Next()
    {
        GetComponent<Animator>().SetTrigger("TakeWeapon");

        if (GetNumInArray() < inventoryCells.Length - 1)
        {
            ActiveCellObject(inventoryCells[GetNumInArray() + 1]);
        }
        else
        {
            ActiveCellObject(inventoryCells[0]);
        }
    }

    private void Last()
    {
        GetComponent<Animator>().SetTrigger("TakeWeapon");

        if (GetNumInArray() > 0)
        {
            ActiveCellObject(inventoryCells[GetNumInArray() - 1]);
        }
        else
        {
            ActiveCellObject(inventoryCells[inventoryCells.Length - 1]);
        }
    }

    private IEnumerator ActiveDelay(Cell _cellToActive)
    {
        yield return new WaitForSeconds(0.2f);
        _cellToActive.cellObject.SetActive(true);
        _cellToActive.gameObject.GetComponent<Image>().enabled = true;
        _cellToActive.transform.parent.gameObject.GetComponent<RawImage>().enabled = true;
    }

    private IEnumerator SetAnimation(string _animationName)
    {
        if (!FindObjectOfType<Inventory>().gameObject.GetComponent<Animator>().GetBool(_animationName))
        {
            FindObjectOfType<Inventory>().gameObject.GetComponent<Animator>().SetBool(_animationName, true);
            yield return new WaitForSeconds(1f);
            FindObjectOfType<Inventory>().gameObject.GetComponent<Animator>().SetBool(_animationName, false);
        }
        else
        {
            FindObjectOfType<Inventory>().gameObject.GetComponent<Animator>().SetBool(_animationName, false);
            StartCoroutine(SetAnimation("TakeWeapon"));
        }
    }

    private IEnumerator WaitAndSetTrue()
    {
        yield return new WaitForSeconds(1f);
        canScreen = true;
    }
}
